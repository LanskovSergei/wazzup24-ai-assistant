// background.js - Service Worker –¥–ª—è Wazzup24 AI Assistant

console.log('üöÄ Wazzup24 AI Assistant Service Worker –∑–∞–ø—É—â–µ–Ω');

// –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚ö° Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
});

self.addEventListener('install', (event) => {
  console.log('üì¶ Service Worker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  self.skipWaiting();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onInstalled.addListener((details) => {
  if (details.reason === 'install') {
    console.log('üéâ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chrome.storage.sync.set({
      enabled: true,
      apiKey: '',
      model: 'gpt-4o', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o
      customPrompt: '',
      temperature: 0.7,
      maxTokens: 800, // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      contextMessages: 50 // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 50
    });
    
  } else if (details.reason === 'update') {
    const previousVersion = details.previousVersion;
    const currentVersion = chrome.runtime.getManifest().version;
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å ${previousVersion} –Ω–∞ ${currentVersion}`);
  }
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let generationCount = 0;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('üîî –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!');
  console.log('üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
  console.log('üì® –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
  console.log('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', sender);
  
  switch (message.type) {
    case 'GET_SETTINGS':
      console.log('‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      handleGetSettings(sendResponse);
      return true;
      
    case 'GENERATE_RESPONSES':
      console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤');
      handleGenerateResponses(message.data, sendResponse);
      return true;
      
    case 'LOG_ERROR':
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑ content script:', message.error);
      break;
      
    case 'LOG_INFO':
      console.log('‚ÑπÔ∏è –ò–Ω—Ñ–æ –∏–∑ content script:', message.info);
      break;
      
    case 'GENERATION_SUCCESS':
      generationCount++;
      console.log(`üìä –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${generationCount}`);
      break;
      
    default:
      console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
  }
  
  return false;
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleGetSettings(sendResponse) {
  console.log('üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ storage...');
  try {
    const settings = await chrome.storage.sync.get([
      'enabled',
      'apiKey',
      'model',
      'customPrompt',
      'temperature',
      'maxTokens',
      'contextMessages'
    ]);
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
    sendResponse({ success: true, settings });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    sendResponse({ success: false, error: error.message });
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
async function handleGenerateResponses(data, sendResponse) {
  console.log('üéØ handleGenerateResponses –≤—ã–∑–≤–∞–Ω–∞');
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data);
  
  try {
    const { clientMessage, context, settings } = data;
    
    console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientMessage);
    console.log('üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç:', context);
    console.log('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
    
    if (!settings.apiKey) {
      console.error('‚ùå API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', settings.apiKey.substring(0, 15) + '...');
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è:', clientMessage);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = buildPrompt(clientMessage, context, settings.customPrompt);
    console.log('üìù –ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', prompt.length);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    const actualModel = 'gpt-4o';
    
    const requestBody = {
      model: actualModel,
      messages: [
        {
          role: 'system',
          content: getSystemPrompt(settings.customPrompt)
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: settings.temperature || 0.7,
      max_tokens: settings.maxTokens || 800
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API...');
    console.log('üì§ –ú–æ–¥–µ–ª—å:', actualModel);
    console.log('üì§ Temperature:', requestBody.temperature);
    console.log('üì§ Max tokens:', requestBody.max_tokens);
    
    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${settings.apiKey}`
      },
      body: JSON.stringify(requestBody)
    });
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ API OpenAI:', errorData);
      throw new Error(errorData.error?.message || `API –æ—à–∏–±–∫–∞: ${response.status}`);
    }
    
    const responseData = await response.json();
    console.log('üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', responseData);
    
    const content = responseData.choices[0].message.content;
    console.log('üì• –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞:', content);
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω');
    
    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const variants = parseGPTResponse(content);
    console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', variants);
    
    const successResponse = { 
      success: true, 
      variants,
      usage: responseData.usage
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ content script:', successResponse);
    sendResponse(successResponse);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    const errorResponse = { 
      success: false, 
      error: error.message 
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ content script:', errorResponse);
    sendResponse(errorResponse);
  }
}

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
function getSystemPrompt(customPrompt) {
  let systemPrompt = `–¢—ã ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ DJI Market.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–†–ê–©–ï–ù–ò–Ø:
- –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞ "–í—ã" (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã): "–í—ã", "–í–∞–º", "–í–∞—Å", "–í–∞—à"
- –ü–∏—à–∏ –≤–µ–∂–ª–∏–≤–æ, –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É

–¢–í–û–Ø –†–û–õ–¨:
–ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã, –∫–∞–º–µ—Ä—ã, —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã DJI.

–ò–°–¢–û–ß–ù–ò–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò:
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ dji-market.ru ‚Äî –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Ü–µ–Ω.

–ü–†–ò –û–¢–í–ï–¢–ï:
1. –ü—Ä–µ–¥–ª–∞–≥–∞–π 1‚Äì3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥–µ–ª–∏ —Å:
   - –ù–∞–∑–≤–∞–Ω–∏–µ–º
   - –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–º –ø–æ —Ü–µ–Ω–µ
   - –°—Å—ã–ª–∫–æ–π –Ω–∞ dji-market.ru
2. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
3. –ü–∏—à–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å –ø–æ–ª—å–∑–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –ª—É—á—à–µ –∏ –¥–ª—è –∫–æ–≥–æ –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
4. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ª—É—á—à–µ
5. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–∏–∞–ª–æ–≥ –≤–¥—É–º—á–∏–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å

–†–ê–ë–û–¢–ê –° –í–û–ó–†–ê–ñ–ï–ù–ò–Ø–ú–ò:
–û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è —Å–ø–æ–∫–æ–π–Ω–æ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤—ã–≥–æ–¥—ã:
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è (–Ω–µ –ø–æ–¥–¥–µ–ª–∫–∏)
- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ

–ï–°–õ–ò –ö–õ–ò–ï–ù–¢ –°–û–ú–ù–ï–í–ê–ï–¢–°–Ø:
- –ü–æ–º–æ–≥–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º
- –ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ö–ü)
- –ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ö–æ—Ä–æ—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
3. –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)`;

  if (customPrompt) {
    systemPrompt += `\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:\n${customPrompt}`;
  }

  return systemPrompt;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GPT
function buildPrompt(clientMessage, context, customPrompt) {
  let prompt = '';

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
  if (context && context.length > 0) {
    prompt += '–ö–û–ù–¢–ï–ö–°–¢ –ü–ï–†–ï–ü–ò–°–ö–ò (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º):\n';
    context.forEach((msg, index) => {
      const role = msg.role === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : '–ú–µ–Ω–µ–¥–∂–µ—Ä';
      prompt += `${index + 1}. ${role}: ${msg.text}\n`;
    });
    prompt += '\n';
  }

  prompt += `–ü–û–°–õ–ï–î–ù–ï–ï –ê–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å):\n"${clientMessage}"\n\n`;

  prompt += `–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ò–ú–ï–ù–ù–û –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.
–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏, –Ω–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –≤–æ–ø—Ä–æ—Å.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "variant1": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç",
  "variant2": "—Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
  "variant3": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—Ç–æ—á–Ω—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"
}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –û–±—Ä–∞—â–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ "–í—ã" —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã: "–í—ã", "–í–∞–º", "–í–∞—Å", "–í–∞—à"
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π "–≤—ã", "–≤–∞–º", "–≤–∞—Å" —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã

–ù–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ JSON!`;

  return prompt;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
function parseGPTResponse(content) {
  console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT...');
  try {
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      console.error('‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ GPT');
    }
    
    console.log('‚úÖ JSON –Ω–∞–π–¥–µ–Ω:', jsonMatch[0]);
    
    const parsed = JSON.parse(jsonMatch[0]);
    console.log('‚úÖ JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', parsed);
    
    if (!parsed.variant1 || !parsed.variant2 || !parsed.variant3) {
      console.error('‚ùå –ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT:', parsed);
      throw new Error('–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT');
    }
    
    const variants = [
      { label: '–ö–æ—Ä–æ—Ç–∫–∏–π', text: parsed.variant1 },
      { label: '–ü–æ–¥—Ä–æ–±–Ω—ã–π', text: parsed.variant2 },
      { label: '–° –≤–æ–ø—Ä–æ—Å–∞–º–∏', text: parsed.variant3 }
    ];
    
    console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:', variants);
    return variants;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GPT:', error);
    console.log('üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', content);
    
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã');
    return [
      { label: '–ö–æ—Ä–æ—Ç–∫–∏–π', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –£—Ç–æ—á–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' },
      { label: '–ü–æ–¥—Ä–æ–±–Ω—ã–π', text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ DJI Market. –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á—É –í–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–µ—Ä—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –£ –Ω–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏.' },
      { label: '–° –≤–æ–ø—Ä–æ—Å–∞–º–∏', text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–º–æ–≥—É –í–∞–º —Å –≤—ã–±–æ—Ä–æ–º. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.' }
    ];
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ storage
chrome.storage.onChanged.addListener((changes, areaName) => {
  if (areaName === 'sync') {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã:', changes);
    
    if (changes.enabled) {
      const isEnabled = changes.enabled.newValue;
      console.log(`üîÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
      
      notifyAllTabs({ type: 'ENABLED_CHANGED', enabled: isEnabled });
    }
  }
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ Wazzup24
async function notifyAllTabs(message) {
  try {
    const tabs = await chrome.tabs.query({ 
      url: 'https://app.wazzup24.com/*' 
    });
    
    tabs.forEach((tab) => {
      chrome.tabs.sendMessage(tab.id, message).catch((error) => {
        console.log(`‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–± ${tab.id}`);
      });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫:', error);
  }
}

console.log('‚úÖ Background Service Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
