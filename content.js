// content.js - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è Wazzup24
console.log('üöÄ Wazzup24 AI Assistant –∑–∞–≥—Ä—É–∂–µ–Ω');

class WazzupAIAssistant {
  constructor() {
    this.panel = null;
    this.apiKey = null;
    this.isGenerating = false;
    this.lastMessageText = '';
    this.messageObserver = null;
    this.lastProcessedChatId = null;
    this.keepAlivePort = null;
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Wazzup24 (–û–ë–ù–û–í–õ–ï–ù–û!)
    this.selectors = {
      chatInput: '.chat-input[contenteditable="true"]', // –ò–°–ü–†–ê–í–õ–ï–ù–û!
      messagesList: '.body-messages-list',
      incomingMessage: '.body-messages-item.incoming',
      messageText: '.body-text-message.body-text div[dir="auto"]',
      sendButton: '.footer-send button',
      chatContainer: '.body-messages'
    };
    
    this.init();
  }

  async init() {
    console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await this.loadSettings();
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setup());
    } else {
      this.setup();
    }
  }

  async loadSettings() {
    return new Promise((resolve) => {
      chrome.storage.sync.get(['apiKey', 'enabled'], (data) => {
        this.apiKey = data.apiKey || null;
        this.enabled = data.enabled !== false;
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { hasKey: !!this.apiKey, enabled: this.enabled });
        resolve();
      });
    });
  }

  setup() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    const chatContainer = 
      document.querySelector(this.selectors.chatContainer) ||
      document.querySelector('[class*="body-messages"]') ||
      document.querySelector('[class*="chat-container"]') ||
      document.querySelector('[class*="messages-wrapper"]') ||
      document.querySelector('main') ||
      document.querySelector('#app');
    
    if (!chatContainer) {
      console.log('‚è≥ –ß–∞—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...');
      setTimeout(() => this.setup(), 2000);
      return;
    }

    console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω:', chatContainer.className || chatContainer.tagName);

    this.createPanel();
    this.watchMessages();
    this.watchChatChanges();
    this.checkLastMessage();
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  createPanel() {
    if (document.getElementById('wazzup-ai-panel')) {
      console.log('‚ÑπÔ∏è –ü–∞–Ω–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    const panel = document.createElement('div');
    panel.id = 'wazzup-ai-panel';
    panel.innerHTML = `
      <div class="wai-header">
        <div class="wai-title">
          <span class="wai-icon">‚ú®</span>
          AI –ü–æ–¥—Å–∫–∞–∑–∫–∏
        </div>
        <button class="wai-close" title="–°–≤–µ—Ä–Ω—É—Ç—å">&times;</button>
      </div>
      <div class="wai-content">
        <div class="wai-empty">
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</p>
          <small>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</small>
        </div>
      </div>
    `;

    document.body.appendChild(panel);
    this.panel = panel;

    panel.querySelector('.wai-close').addEventListener('click', () => {
      panel.classList.toggle('wai-minimized');
    });

    console.log('üé® –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DOM');
  }

  checkLastMessage() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    const incomingMessages = document.querySelectorAll(
      '.body-messages-item.incoming, [class*="incoming"]'
    );
    
    if (incomingMessages.length === 0) {
      console.log('‚ÑπÔ∏è –í—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      this.showEmptyState();
      return;
    }
    
    const lastIncoming = incomingMessages[incomingMessages.length - 1];
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    this.onNewIncomingMessage(lastIncoming, true);
  }

  watchChatChanges() {
    console.log('üëÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–º–µ–Ω—É —á–∞—Ç–∞...');
    
    let lastUrl = location.href;
    new MutationObserver(() => {
      const url = location.href;
      if (url !== lastUrl) {
        console.log('üîÑ URL –∏–∑–º–µ–Ω–∏–ª—Å—è, —á–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
        lastUrl = url;
        this.lastMessageText = '';
        this.lastProcessedChatId = null;
        
        setTimeout(() => this.checkLastMessage(), 1000);
      }
    }).observe(document, { subtree: true, childList: true });
  }

  watchMessages() {
    const messagesList = 
      document.querySelector('.body-messages-list') ||
      document.querySelector('[class*="messages-list"]') ||
      document.querySelector('[class*="chat-messages"]') ||
      document.querySelector('.chat-body-wrapper') ||
      document.querySelector('.message-item-hover')?.parentElement ||
      document.body;
    
    if (!messagesList) {
      console.log('‚è≥ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...');
      setTimeout(() => this.watchMessages(), 2000);
      return;
    }

    console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω:', messagesList.className || messagesList.tagName);

    this.messageObserver = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === 1 && node.querySelector) {
              const incomingMsg = 
                node.querySelector('.body-messages-item.incoming') ||
                (node.classList && node.classList.contains('incoming') ? node : null) ||
                node.querySelector('[class*="incoming"]');
                
              if (incomingMsg) {
                this.onNewIncomingMessage(incomingMsg, false);
              }
            }
          });
        }
      }
    });

    this.messageObserver.observe(messagesList, {
      childList: true,
      subtree: true
    });

    console.log('üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  }

  onNewIncomingMessage(messageElement, isInitial = false) {
    console.log('üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', isInitial ? '(–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)' : '(–Ω–æ–≤–æ–µ)');
    
    const textElement = 
      messageElement.querySelector(this.selectors.messageText) ||
      messageElement.querySelector('[dir="auto"]') ||
      messageElement.querySelector('.body-text') ||
      messageElement.querySelector('[class*="text"]');
      
    if (!textElement) {
      console.log('‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      if (isInitial) this.showEmptyState();
      return;
    }

    const messageText = textElement.textContent.trim();
    
    if (!messageText) {
      console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
      if (isInitial) this.showEmptyState();
      return;
    }
    
    if (isInitial || messageText !== this.lastMessageText) {
      this.lastMessageText = messageText;
      console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', messageText);
      this.generateResponses(messageText);
    } else {
      console.log('‚ÑπÔ∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
    }
  }

  showEmptyState() {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = `
      <div class="wai-empty">
        <p>–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        <small>–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—à–µ—Ç, —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</small>
      </div>
    `;
  }

  // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è Service Worker
  async wakeUpServiceWorker() {
    return new Promise((resolve) => {
      chrome.runtime.sendMessage({ type: 'PING' }, (response) => {
        if (chrome.runtime.lastError) {
          console.log('‚ö†Ô∏è Service Worker —Å–ø–∏—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±—É–¥–∏—Ç—å...');
          setTimeout(() => {
            chrome.runtime.sendMessage({ type: 'PING' }, () => {
              resolve();
            });
          }, 100);
        } else {
          console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–µ–Ω');
          resolve();
        }
      });
    });
  }

  async generateResponses(clientMessage) {
    console.log('üéØ generateResponses –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', clientMessage);
    
    if (!this.apiKey) {
      console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.showError('API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
      return;
    }

    console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', this.apiKey.substring(0, 10) + '...');

    if (this.isGenerating) {
      console.log('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }

    this.isGenerating = true;
    this.showLoading();

    try {
      // –°–Ω–∞—á–∞–ª–∞ –±—É–¥–∏–º Service Worker
      await this.wakeUpServiceWorker();
      
      const context = this.getConversationContext();
      console.log('üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω:', context);
      
      const settings = await chrome.storage.sync.get([
        'model',
        'customPrompt',
        'temperature',
        'maxTokens',
        'contextMessages'
      ]);
      
      console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
      
      const messageData = {
        type: 'GENERATE_RESPONSES',
        data: {
          clientMessage,
          context,
          settings: {
            apiKey: this.apiKey,
            model: settings.model || 'gpt-5',
            customPrompt: settings.customPrompt || '',
            temperature: settings.temperature || 0.7,
            maxTokens: settings.maxTokens || 800
          }
        }
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ background:', messageData);
      
      const timeoutId = setTimeout(() => {
        console.error('‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢! –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
        this.showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        this.isGenerating = false;
      }, 30000);
      
      chrome.runtime.sendMessage(messageData, (response) => {
        clearTimeout(timeoutId);
        
        console.log('üì• Callback –≤—ã–∑–≤–∞–Ω');
        console.log('üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response);
        
        if (chrome.runtime.lastError) {
          console.error('‚ùå Chrome runtime error:', chrome.runtime.lastError);
          this.showError('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: ' + chrome.runtime.lastError.message);
          this.isGenerating = false;
          return;
        }
        
        if (!response) {
          console.error('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç background script');
          this.showError('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.');
          this.isGenerating = false;
          return;
        }
        
        if (response.success) {
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã:', response.variants);
          this.displayResponses(response.variants);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', response.error);
          this.showError('–û—à–∏–±–∫–∞: ' + response.error);
        }
        this.isGenerating = false;
      });
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞...');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: ' + error.message);
      this.isGenerating = false;
    }
  }

  getConversationContext() {
    const messages = [];
    const allMessages = document.querySelectorAll('.body-messages-item, [class*="message-item"]');
    
    console.log(`üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: ${allMessages.length}`);
    
    const recentMessages = Array.from(allMessages).slice(-50);
    
    console.log(`üìä –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    recentMessages.forEach((msgEl, index) => {
      const isIncoming = msgEl.classList.contains('incoming') || 
                        msgEl.querySelector('[class*="incoming"]');
      const textEl = msgEl.querySelector('[dir="auto"], .body-text, [class*="text"]');
      
      if (textEl) {
        const messageText = textEl.textContent.trim();
        messages.push({
          role: isIncoming ? 'client' : 'manager',
          text: messageText,
          index: index + 1
        });
      }
    });
    
    console.log('üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:');
    console.log(`   - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
    console.log(`   - –û—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${messages.filter(m => m.role === 'client').length}`);
    console.log(`   - –û—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${messages.filter(m => m.role === 'manager').length}`);
    
    const lastClientMessage = messages.filter(m => m.role === 'client').pop();
    if (lastClientMessage) {
      console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: "${lastClientMessage.text.substring(0, 50)}..."`);
    }
    
    return messages;
  }

  showLoading() {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = `
      <div class="wai-loader">
        <div class="wai-spinner"></div>
        <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...</p>
      </div>
    `;
  }

  displayResponses(responses) {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = '';

    responses.forEach((response, index) => {
      const suggestionEl = document.createElement('div');
      suggestionEl.className = 'wai-suggestion';
      suggestionEl.innerHTML = `
        <div class="wai-suggestion-label">${response.label}</div>
        <div class="wai-suggestion-text">${response.text}</div>
        <div class="wai-suggestion-actions">
          <button class="wai-btn wai-btn-insert" data-index="${index}">
            üìã –í—Å—Ç–∞–≤–∏—Ç—å
          </button>
          <button class="wai-btn wai-btn-send" data-index="${index}">
            ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      `;

      suggestionEl.querySelector('.wai-btn-insert').addEventListener('click', () => {
        this.insertResponse(response.text);
      });

      suggestionEl.querySelector('.wai-btn-send').addEventListener('click', () => {
        this.insertAndSendResponse(response.text);
      });

      content.appendChild(suggestionEl);
    });

    console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û!
  insertResponse(text) {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputField = 
      document.querySelector('.chat-input[contenteditable="true"]') || // –ù–û–í–´–ô!
      document.querySelector('.chat-input') ||
      document.querySelector('.chat-input-text[contenteditable="true"]') ||
      document.querySelector('[contenteditable="true"]');
    
    if (!inputField) {
      console.error('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ contenteditable —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allEditable = document.querySelectorAll('[contenteditable="true"]');
      console.log('–ù–∞–π–¥–µ–Ω–æ contenteditable —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', allEditable.length);
      allEditable.forEach((el, i) => {
        console.log(`${i + 1}. –ö–ª–∞—Å—Å: "${el.className}", –¢–µ–≥: ${el.tagName}`);
      });
      
      this.showError('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ:', inputField.className);

    // –û—á–∏—â–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    inputField.innerHTML = '';
    inputField.textContent = text;
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    inputField.dispatchEvent(new Event('input', { bubbles: true }));
    inputField.dispatchEvent(new Event('change', { bubbles: true }));
    inputField.focus();

    console.log('‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
  }

  insertAndSendResponse(text) {
    this.insertResponse(text);
    
    setTimeout(() => {
      const sendBtn = document.querySelector(this.selectors.sendButton);
      if (sendBtn) {
        sendBtn.click();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    }, 100);
  }

  showError(message) {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = `
      <div class="wai-error">
        <span class="wai-error-icon">‚ö†Ô∏è</span>
        <p>${message}</p>
      </div>
    `;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
const assistant = new WazzupAIAssistant();
