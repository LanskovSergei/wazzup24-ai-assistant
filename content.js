// content.js - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Wazzup24

console.log('üöÄ Wazzup24 AI Assistant –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let settings = null;
let aiPanel = null;
let isEnabled = true;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
async function init() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await loadSettings();
    
    if (!isEnabled) {
      console.log('‚è∏Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
    createAIPanel();
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
    observeMessages();
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function loadSettings() {
  console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  
  try {
    const response = await chrome.runtime.sendMessage({ 
      type: 'GET_SETTINGS' 
    });
    
    if (response && response.success) {
      settings = response.settings;
      isEnabled = settings.enabled !== false;
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å background:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ AI
function createAIPanel() {
  if (aiPanel) {
    console.log('‚ÑπÔ∏è –ü–∞–Ω–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ AI...');
  
  aiPanel = document.createElement('div');
  aiPanel.id = 'wazzup-ai-panel';
  aiPanel.innerHTML = `
    <div class="wai-header">
      <div class="wai-title">
        <span class="wai-icon">‚ú®</span>
        AI –ü–æ–º–æ—â–Ω–∏–∫
      </div>
      <button class="wai-close" title="–°–≤–µ—Ä–Ω—É—Ç—å">‚àí</button>
    </div>
    <div class="wai-content">
      <div class="wai-empty">
        <p>üëã –ü—Ä–∏–≤–µ—Ç!</p>
        <small>–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—à–µ—Ç, —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</small>
      </div>
    </div>
  `;
  
  document.body.appendChild(aiPanel);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
  const closeBtn = aiPanel.querySelector('.wai-close');
  closeBtn.addEventListener('click', () => {
    aiPanel.classList.toggle('wai-minimized');
    closeBtn.textContent = aiPanel.classList.contains('wai-minimized') ? '+' : '‚àí';
    closeBtn.title = aiPanel.classList.contains('wai-minimized') ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–°–≤–µ—Ä–Ω—É—Ç—å';
  });
  
  console.log('‚úÖ –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞');
}

// –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
function observeMessages() {
  console.log('üëÄ –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...');
  
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.nodeType === 1) {
          checkForNewClientMessage(node);
        }
      });
    });
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  console.log('‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
function checkForNewClientMessage(node) {
  // Wazzup24 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const selectors = [
    '[data-message-type="incoming"]',
    '.message.incoming',
    '.chat-message.incoming',
    '[class*="incoming"]'
  ];
  
  let messageElement = null;
  
  for (const selector of selectors) {
    if (node.matches && node.matches(selector)) {
      messageElement = node;
      break;
    }
    
    messageElement = node.querySelector && node.querySelector(selector);
    if (messageElement) break;
  }
  
  if (messageElement) {
    const messageText = extractMessageText(messageElement);
    
    if (messageText && messageText.length > 0) {
      console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', messageText);
      handleNewClientMessage(messageText);
    }
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractMessageText(messageElement) {
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  const textSelectors = [
    '.message-text',
    '.chat-message-text',
    '[class*="message"][class*="text"]',
    'p',
    'span'
  ];
  
  for (const selector of textSelectors) {
    const textElement = messageElement.querySelector(selector);
    if (textElement && textElement.textContent.trim()) {
      return textElement.textContent.trim();
    }
  }
  
  return messageElement.textContent.trim();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleNewClientMessage(messageText) {
  console.log('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
  
  if (!settings || !settings.apiKey) {
    showError('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  showLoading();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    const context = getConversationContext();
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
    const response = await chrome.runtime.sendMessage({
      type: 'GENERATE_RESPONSES',
      data: {
        clientMessage: messageText,
        context: context,
        settings: settings
      }
    });
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç background:', response);
    
    if (response && response.success) {
      showSuggestions(response.variants);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
      chrome.runtime.sendMessage({
        type: 'GENERATION_SUCCESS',
        variants: response.variants
      });
    } else {
      throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    showError(error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
function getConversationContext() {
  const messages = [];
  const maxMessages = settings.contextMessages || 5;
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const chatSelectors = [
    '.chat-messages',
    '.messages-container',
    '[class*="messages"]',
    '[class*="chat"]'
  ];
  
  let chatContainer = null;
  
  for (const selector of chatSelectors) {
    chatContainer = document.querySelector(selector);
    if (chatContainer) break;
  }
  
  if (!chatContainer) {
    console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return messages;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const allMessages = chatContainer.querySelectorAll('[data-message-type], .message, .chat-message');
  const recentMessages = Array.from(allMessages).slice(-maxMessages);
  
  recentMessages.forEach((msg) => {
    const text = extractMessageText(msg);
    const isIncoming = msg.matches('[data-message-type="incoming"]') || 
                       msg.classList.contains('incoming');
    
    if (text) {
      messages.push({
        role: isIncoming ? 'client' : 'manager',
        text: text
      });
    }
  });
  
  console.log('üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', messages);
  return messages;
}

// –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
  if (!aiPanel) return;
  
  const content = aiPanel.querySelector('.wai-content');
  content.innerHTML = `
    <div class="wai-loader">
      <div class="wai-spinner"></div>
      <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...</p>
    </div>
  `;
}

// –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
function showSuggestions(variants) {
  if (!aiPanel) return;
  
  console.log('üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', variants);
  
  const content = aiPanel.querySelector('.wai-content');
  content.innerHTML = variants.map((variant, index) => `
    <div class="wai-suggestion">
      <div class="wai-suggestion-label">–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${variant.label}</div>
      <div class="wai-suggestion-text">${variant.text}</div>
      <div class="wai-suggestion-actions">
        <button class="wai-btn wai-btn-copy" data-text="${escapeHtml(variant.text)}">
          üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </div>
    </div>
  `).join('');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  content.querySelectorAll('.wai-btn-copy').forEach((btn) => {
    btn.addEventListener('click', () => {
      const text = btn.getAttribute('data-text');
      copyToClipboard(text, btn);
    });
  });
  
  // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
  aiPanel.classList.remove('wai-minimized');
  const closeBtn = aiPanel.querySelector('.wai-close');
  closeBtn.textContent = '‚àí';
  closeBtn.title = '–°–≤–µ—Ä–Ω—É—Ç—å';
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(errorMessage) {
  if (!aiPanel) return;
  
  const content = aiPanel.querySelector('.wai-content');
  content.innerHTML = `
    <div class="wai-error">
      <span class="wai-error-icon">‚ö†Ô∏è</span>
      <p>${errorMessage}</p>
    </div>
  `;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyToClipboard(text, button) {
  try {
    await navigator.clipboard.writeText(text);
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    const originalText = button.innerHTML;
    button.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    button.style.background = '#4caf50';
    button.style.color = 'white';
    button.disabled = true;
    
    setTimeout(() => {
      button.innerHTML = originalText;
      button.style.background = '';
      button.style.color = '';
      button.disabled = false;
    }, 2000);
    
    console.log('‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    try {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      textarea.style.position = 'fixed';
      textarea.style.opacity = '0';
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand('copy');
      document.body.removeChild(textarea);
      
      button.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
      setTimeout(() => {
        button.innerHTML = 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
      }, 2000);
    } catch (fallbackError) {
      console.error('‚ùå Fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', fallbackError);
      button.innerHTML = '‚ùå –û—à–∏–±–∫–∞';
      setTimeout(() => {
        button.innerHTML = 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
      }, 2000);
    }
  }
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background/popup
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message);
  
  switch (message.type) {
    case 'SETTINGS_UPDATED':
      console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...');
      loadSettings().then(() => {
        if (isEnabled && !aiPanel) {
          createAIPanel();
        } else if (!isEnabled && aiPanel) {
          aiPanel.remove();
          aiPanel = null;
        }
      });
      break;
      
    case 'ENABLED_CHANGED':
      isEnabled = message.enabled;
      console.log(`üîÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${isEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
      
      if (isEnabled && !aiPanel) {
        createAIPanel();
      } else if (!isEnabled && aiPanel) {
        aiPanel.remove();
        aiPanel = null;
      }
      break;
  }
  
  return false;
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}

console.log('‚úÖ Content script –∑–∞–≥—Ä—É–∂–µ–Ω');





