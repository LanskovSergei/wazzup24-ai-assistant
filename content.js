console.log('üöÄ Wazzup24 AI Assistant –∑–∞–≥—Ä—É–∂–µ–Ω');

class WazzupAIAssistant {
  constructor() {
    console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    this.currentMessage = null;
    this.panel = null;
    this.responses = [];
    this.chatContainer = null;
    
    this.init();
  }

  async init() {
    try {
      const settings = await this.loadSettings();
      console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        hasKey: !!settings.apiKey,
        enabled: settings.enabled
      });
      
      if (!settings.enabled) {
        console.log('‚è∏Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        return;
      }

      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
      await this.setupUI();
      this.watchIncomingMessages();
      this.watchChatChanges();
      
      console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  async setupUI() {
    const maxAttempts = 10;
    let attempt = 0;

    while (attempt < maxAttempts) {
      this.chatContainer = document.querySelector('.body-messages');
      
      if (this.chatContainer) {
        const firstIncoming = this.chatContainer.querySelector('.body-messages-item.incoming');
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω:', firstIncoming ? firstIncoming.className : '–Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö');
        this.createPanel();
        this.checkLastMessage();
        return;
      }

      attempt++;
      console.log(`‚è≥ –ß–∞—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${attempt} —Å–µ–∫...`);
      await this.sleep(1000);
    }

    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞');
  }

  createPanel() {
    if (document.getElementById('wazzup-ai-panel')) {
      console.log('‚ö†Ô∏è –ü–∞–Ω–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    this.panel = document.createElement('div');
    this.panel.id = 'wazzup-ai-panel';
    this.panel.className = 'wai-panel';
    this.panel.innerHTML = `
      <div class="wai-header">
        <h3 class="wai-title">ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫</h3>
        <button class="wai-close" title="–°–≤–µ—Ä–Ω—É—Ç—å">‚àí</button>
      </div>
      <div class="wai-content">
        <div class="wai-view-responses"></div>
      </div>
    `;

    document.body.appendChild(this.panel);
    console.log('üé® –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ DOM');

    this.panel.querySelector('.wai-close').addEventListener('click', () => {
      this.panel.classList.toggle('wai-minimized');
    });
  }

  checkLastMessage() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    if (!this.chatContainer) {
      console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const incomingMessages = this.chatContainer.querySelectorAll('.body-messages-item.incoming');
    
    if (incomingMessages.length > 0) {
      const lastIncoming = incomingMessages[incomingMessages.length - 1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      this.onNewIncomingMessage(lastIncoming, true);
    } else {
      console.log('‚ÑπÔ∏è –í—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      this.showEmptyState();
    }
  }

  watchChatChanges() {
    console.log('üëÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–º–µ–Ω—É —á–∞—Ç–∞...');
    
    let lastChatUrl = window.location.href;
    
    const urlObserver = setInterval(() => {
      const currentUrl = window.location.href;
      
      if (currentUrl !== lastChatUrl) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —á–∞—Ç–∞');
        lastChatUrl = currentUrl;
        
        setTimeout(() => {
          this.chatContainer = document.querySelector('.body-messages');
          this.checkLastMessage();
        }, 500);
      }
    }, 500);
  }

  watchIncomingMessages() {
    const messagesList = document.querySelector('.chat-body-wrapper');
    
    if (!messagesList) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π');
      return;
    }

    console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω:', messagesList.className);

    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach(node => {
            if (node.nodeType === 1 && node.classList && node.classList.contains('incoming')) {
              console.log('üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
              this.onNewIncomingMessage(node, false);
            }
          });
        }
      }
    });

    observer.observe(messagesList, {
      childList: true,
      subtree: true
    });

    console.log('üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  }

  async onNewIncomingMessage(messageElement, isInitial = false) {
    console.log(`üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${isInitial ? '–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ' : '–Ω–æ–≤–æ–µ'})`);
    
    await this.sleep(500);

    const messageText = this.extractMessageText(messageElement);
    
    if (!messageText || messageText.trim() === '') {
      console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', messageText);
    this.currentMessage = messageText;

    this.generateResponses(messageText);
  }

  extractMessageText(element) {
    const textElement = element.querySelector('.body-messages-item-text span span');
    return textElement ? textElement.textContent.trim() : '';
  }

  showEmptyState() {
    const content = this.panel.querySelector('.wai-view-responses');
    if (content) {
      content.innerHTML = `
        <div class="wai-empty-state">
          <p>üí¨ –û–∂–∏–¥–∞—é –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</p>
        </div>
      `;
    }
  }

  async generateResponses(message) {
    console.log('üéØ generateResponses –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', message);

    try {
      const settings = await this.loadSettings();

      if (!settings.apiKey) {
        console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        this.showError('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
        return;
      }

      console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', settings.apiKey.substring(0, 10) + '...');

      this.showLoading();

      const context = this.getMessageContext();
      console.log('üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω:', context);

      chrome.storage.sync.get([
        'model',
        'temperature',
        'maxTokens',
        'contextMessages',
        'customPrompt'
      ], (items) => {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', items);

        const requestData = {
          message: message,
          context: context,
          settings: {
            model: items.model || 'gpt-4',
            temperature: items.temperature || 0.7,
            maxTokens: items.maxTokens || 500,
            customPrompt: items.customPrompt || ''
          }
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ background:', {
          type: 'GENERATE_RESPONSES',
          data: requestData
        });

        chrome.runtime.sendMessage(
          {
            type: 'GENERATE_RESPONSES',
            data: requestData
          },
          (response) => {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç background:', response);

            if (chrome.runtime.lastError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ runtime:', chrome.runtime.lastError);
              this.showError('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º: ' + chrome.runtime.lastError.message);
              return;
            }

            if (!response) {
              console.error('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç background');
              this.showError('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
              return;
            }

            if (response.error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:', response.error);
              this.showError(response.error);
              return;
            }

            if (response.responses && response.responses.length > 0) {
              console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:', response.responses.length);
              this.responses = response.responses;
              this.displayResponses();
            } else {
              console.error('‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
              this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤');
            }
          }
        );

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞...');
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ generateResponses:', error);
      this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
  }

  getMessageContext() {
    if (!this.chatContainer) return [];

    const messages = Array.from(this.chatContainer.querySelectorAll('.body-messages-item'));
    const contextMessages = messages.slice(-10).map(msg => {
      const isIncoming = msg.classList.contains('incoming');
      const textElement = msg.querySelector('.body-messages-item-text span span');
      const text = textElement ? textElement.textContent.trim() : '';
      
      return {
        role: isIncoming ? 'user' : 'assistant',
        content: text
      };
    }).filter(msg => msg.content !== '');

    return contextMessages;
  }

  displayResponses() {
    const content = this.panel.querySelector('.wai-view-responses');
    if (!content) return;

    content.innerHTML = '';
    
    this.responses.forEach((response, index) => {
      const responseCard = document.createElement('div');
      responseCard.className = 'wai-response-card';
      responseCard.innerHTML = `
        <div class="wai-response-text">${this.escapeHtml(response)}</div>
        <div class="wai-response-actions">
          <button class="wai-btn wai-btn-insert" data-index="${index}">
            üìã –í—Å—Ç–∞–≤–∏—Ç—å
          </button>
          <button class="wai-btn wai-btn-send" data-index="${index}">
            ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      `;
      
      content.appendChild(responseCard);
    });

    content.querySelectorAll('.wai-btn-insert').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const index = parseInt(e.target.dataset.index);
        this.insertResponse(this.responses[index]);
      });
    });

    content.querySelectorAll('.wai-btn-send').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const index = parseInt(e.target.dataset.index);
        this.insertAndSendResponse(this.responses[index]);
      });
    });
  }

  showLoading() {
    const content = this.panel.querySelector('.wai-view-responses');
    if (content) {
      content.innerHTML = `
        <div class="wai-loading">
          <div class="wai-spinner"></div>
          <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...</p>
        </div>
      `;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ!
  insertResponse(text) {
    console.log('üìù –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:', text);

    // –ò—â–µ–º –ü–†–ê–í–ò–õ–¨–ù–û–ï –ø–æ–ª–µ - .chat-input-field (–Ω–µ .chat-input!)
    const chatInputField = document.querySelector('.chat-input-field');
    
    if (!chatInputField) {
      console.error('‚ùå –ü–æ–ª–µ .chat-input-field –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      this.showError('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ:', chatInputField);

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ
    chatInputField.focus();
    chatInputField.textContent = text;
    chatInputField.dispatchEvent(new Event('input', { bubbles: true }));
    
    console.log('‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω, –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  insertAndSendResponse(text) {
    this.insertResponse(text);
    
    setTimeout(() => {
      const sendBtn = document.querySelector('.footer-send button');
      
      if (sendBtn && sendBtn.className.includes('primary--text')) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
        sendBtn.click();
      } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞:', sendBtn?.className);
        // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 200ms
        setTimeout(() => {
          const btn = document.querySelector('.footer-send button');
          if (btn && btn.className.includes('primary--text')) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (2-—è –ø–æ–ø—ã—Ç–∫–∞), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
            btn.click();
          } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —Ç–∞–∫ –∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å');
          }
        }, 200);
      }
    }, 300);
  }

  showError(message) {
    const content = this.panel.querySelector('.wai-view-responses');
    if (content) {
      content.innerHTML = `
        <div class="wai-error">
          <span class="wai-error-icon">‚ö†Ô∏è</span>
          <p>${message}</p>
        </div>
      `;
    }
  }

  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async loadSettings() {
    return new Promise((resolve) => {
      chrome.storage.sync.get(['apiKey', 'enabled'], (items) => {
        resolve({
          apiKey: items.apiKey || '',
          enabled: items.enabled !== false
        });
      });
    });
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
const style = document.createElement('style');
style.textContent = `
  .wai-panel {
    position: fixed;
    right: 20px;
    bottom: 20px;
    width: 400px;
    max-height: 600px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);
    z-index: 999999;
    display: flex;
    flex-direction: column;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    transition: all 0.3s ease;
  }

  .wai-panel.wai-minimized {
    max-height: 60px;
  }

  .wai-panel.wai-minimized .wai-content {
    display: none;
  }

  .wai-header {
    padding: 16px 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 12px 12px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .wai-title {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }

  .wai-close {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    width: 28px;
    height: 28px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s;
  }

  .wai-close:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .wai-content {
    padding: 16px;
    overflow-y: auto;
    flex: 1;
  }

  .wai-view-responses {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .wai-response-card {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 12px;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .wai-response-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .wai-response-text {
    color: #2d3748;
    font-size: 14px;
    line-height: 1.6;
    margin-bottom: 12px;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .wai-response-actions {
    display: flex;
    gap: 8px;
  }

  .wai-btn {
    flex: 1;
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .wai-btn-insert {
    background: #e2e8f0;
    color: #4a5568;
  }

  .wai-btn-insert:hover {
    background: #cbd5e0;
  }

  .wai-btn-send {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .wai-btn-send:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
  }

  .wai-loading {
    text-align: center;
    padding: 32px 16px;
    color: #718096;
  }

  .wai-spinner {
    width: 40px;
    height: 40px;
    margin: 0 auto 16px;
    border: 3px solid #e2e8f0;
    border-top-color: #667eea;
    border-radius: 50%;
    animation: wai-spin 1s linear infinite;
  }

  @keyframes wai-spin {
    to { transform: rotate(360deg); }
  }

  .wai-error {
    background: #fff5f5;
    border: 1px solid #fc8181;
    border-radius: 8px;
    padding: 16px;
    color: #c53030;
    text-align: center;
  }

  .wai-error-icon {
    font-size: 24px;
    display: block;
    margin-bottom: 8px;
  }

  .wai-empty-state {
    text-align: center;
    padding: 32px 16px;
    color: #a0aec0;
  }

  .wai-empty-state p {
    margin: 0;
    font-size: 14px;
  }
`;

document.head.appendChild(style);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
const assistant = new WazzupAIAssistant();
