// content.js - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è Wazzup24
console.log('üöÄ Wazzup24 AI Assistant –∑–∞–≥—Ä—É–∂–µ–Ω');

class WazzupAIAssistant {
  constructor() {
    this.panel = null;
    this.apiKey = null;
    this.isGenerating = false;
    this.lastMessageText = '';
    this.messageObserver = null;
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Wazzup24 (–∏–∑ —Ç–≤–æ–µ–≥–æ HTML)
    this.selectors = {
      chatInput: '.chat-input-text[contenteditable="true"]',
      messagesList: '.body-messages-list',
      incomingMessage: '.body-messages-item.incoming',
      messageText: '.body-text-message.body-text div[dir="auto"]',
      sendButton: '.footer-send button',
      chatContainer: '.body-messages'
    };
    
    this.init();
  }

  async init() {
    console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await this.loadSettings();
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setup());
    } else {
      this.setup();
    }
  }

  async loadSettings() {
    return new Promise((resolve) => {
      chrome.storage.sync.get(['apiKey', 'enabled'], (data) => {
        this.apiKey = data.apiKey || null;
        this.enabled = data.enabled !== false;
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { hasKey: !!this.apiKey, enabled: this.enabled });
        resolve();
      });
    });
  }

  setup() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–∞—Ç–∞
    const chatContainer = document.querySelector(this.selectors.chatContainer);
    if (!chatContainer) {
      console.log('‚è≥ –ß–∞—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫...');
      setTimeout(() => this.setup(), 1000);
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    this.createPanel();
    
    // –°–ª–µ–¥–∏–º –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    this.watchMessages();
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  createPanel() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
    if (document.getElementById('wazzup-ai-panel')) {
      return;
    }

    const panel = document.createElement('div');
    panel.id = 'wazzup-ai-panel';
    panel.innerHTML = `
      <div class="wai-header">
        <div class="wai-title">
          <span class="wai-icon">‚ú®</span>
          AI –ü–æ–¥—Å–∫–∞–∑–∫–∏
        </div>
        <button class="wai-close" title="–°–≤–µ—Ä–Ω—É—Ç—å">&times;</button>
      </div>
      <div class="wai-content">
        <div class="wai-empty">
          <p>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...</p>
          <small>–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—à–µ—Ç, —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</small>
        </div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤ DOM
    document.body.appendChild(panel);
    this.panel = panel;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    panel.querySelector('.wai-close').addEventListener('click', () => {
      panel.classList.toggle('wai-minimized');
    });

    console.log('üé® –ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞');
  }

  watchMessages() {
    const messagesList = document.querySelector(this.selectors.messagesList);
    
    if (!messagesList) {
      console.log('‚è≥ –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä...');
      setTimeout(() => this.watchMessages(), 1000);
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    this.messageObserver = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === 1 && node.querySelector) {
              const incomingMsg = node.querySelector(this.selectors.incomingMessage);
              if (incomingMsg) {
                this.onNewIncomingMessage(incomingMsg);
              }
            }
          });
        }
      }
    });

    this.messageObserver.observe(messagesList, {
      childList: true,
      subtree: true
    });

    console.log('üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  }

  onNewIncomingMessage(messageElement) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const textElement = messageElement.querySelector(this.selectors.messageText);
    if (!textElement) return;

    const messageText = textElement.textContent.trim();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if (!messageText || messageText === this.lastMessageText) {
      return;
    }

    this.lastMessageText = messageText;
    console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageText);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    this.generateResponses(messageText);
  }

  async generateResponses(clientMessage) {
    if (!this.apiKey) {
      this.showError('API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
      return;
    }

    if (this.isGenerating) {
      console.log('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }

    this.isGenerating = true;
    this.showLoading();

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const context = this.getConversationContext();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
      const prompt = this.buildPrompt(clientMessage, context);
      
      // –ó–∞–ø—Ä–æ—Å –∫ OpenAI API
      const responses = await this.callOpenAI(prompt);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      this.displayResponses(responses);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: ' + error.message);
    } finally {
      this.isGenerating = false;
    }
  }

  getConversationContext() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const messages = [];
    const allMessages = document.querySelectorAll('.body-messages-item');
    
    // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    const recentMessages = Array.from(allMessages).slice(-5);
    
    recentMessages.forEach((msgEl) => {
      const isIncoming = msgEl.classList.contains('incoming');
      const textEl = msgEl.querySelector(this.selectors.messageText);
      
      if (textEl) {
        messages.push({
          role: isIncoming ? 'client' : 'manager',
          text: textEl.textContent.trim()
        });
      }
    });
    
    return messages;
  }

  buildPrompt(clientMessage, context) {
    // –ü—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ó
    let prompt = `–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ DJI Market. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–æ–Ω –æ–±—â–µ–Ω–∏—è:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
- –ò—Å–ø–æ–ª—å–∑—É–π "–í—ã", "–í–∞—Å" —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
- –ù–µ–º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤ üôÇ

`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (context.length > 0) {
      prompt += '\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n';
      context.forEach((msg) => {
        const role = msg.role === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : '–ú–µ–Ω–µ–¥–∂–µ—Ä';
        prompt += `${role}: ${msg.text}\n`;
      });
    }

    prompt += `\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: "${clientMessage}"

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ö–æ—Ä–æ—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
2. –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
3. –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):
{
  "variant1": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ 1",
  "variant2": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ 2",
  "variant3": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ 3"
}`;

    return prompt;
  }

  async callOpenAI(prompt) {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –¥—Ä–æ–Ω–æ–≤ DJI.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || '–û—à–∏–±–∫–∞ API OpenAI');
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT');
    }
    
    const variants = JSON.parse(jsonMatch[0]);
    
    return [
      { label: '–ö–æ—Ä–æ—Ç–∫–∏–π', text: variants.variant1 },
      { label: '–ü–æ–¥—Ä–æ–±–Ω—ã–π', text: variants.variant2 },
      { label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', text: variants.variant3 }
    ];
  }

  showLoading() {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = `
      <div class="wai-loader">
        <div class="wai-spinner"></div>
        <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...</p>
      </div>
    `;
  }

  displayResponses(responses) {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = '';

    responses.forEach((response, index) => {
      const suggestionEl = document.createElement('div');
      suggestionEl.className = 'wai-suggestion';
      suggestionEl.innerHTML = `
        <div class="wai-suggestion-label">${response.label}</div>
        <div class="wai-suggestion-text">${response.text}</div>
        <div class="wai-suggestion-actions">
          <button class="wai-btn wai-btn-insert" data-index="${index}">
            üìã –í—Å—Ç–∞–≤–∏—Ç—å
          </button>
          <button class="wai-btn wai-btn-send" data-index="${index}">
            ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </div>
      `;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
      suggestionEl.querySelector('.wai-btn-insert').addEventListener('click', () => {
        this.insertResponse(response.text);
      });

      suggestionEl.querySelector('.wai-btn-send').addEventListener('click', () => {
        this.insertAndSendResponse(response.text);
      });

      content.appendChild(suggestionEl);
    });

    console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
  }

  insertResponse(text) {
    const inputField = document.querySelector(this.selectors.chatInput);
    if (!inputField) {
      this.showError('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    inputField.textContent = text;
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Wazzup
    inputField.dispatchEvent(new Event('input', { bubbles: true }));
    inputField.focus();

    console.log('‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
  }

  insertAndSendResponse(text) {
    this.insertResponse(text);
    
    // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    setTimeout(() => {
      const sendBtn = document.querySelector(this.selectors.sendButton);
      if (sendBtn) {
        sendBtn.click();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    }, 100);
  }

  showError(message) {
    const content = this.panel.querySelector('.wai-content');
    content.innerHTML = `
      <div class="wai-error">
        <span class="wai-error-icon">‚ö†Ô∏è</span>
        <p>${message}</p>
      </div>
    `;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
const assistant = new WazzupAIAssistant();
