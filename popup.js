// popup.js - –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

console.log('üîß Popup –∑–∞–≥—Ä—É–∂–µ–Ω');

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
  enabledToggle: document.getElementById('enabledToggle'),
  apiKey: document.getElementById('apiKey'),
  modelSelect: document.getElementById('modelSelect'),
  promptInput: document.getElementById('promptInput'),
  temperature: document.getElementById('temperature'),
  tempValue: document.getElementById('tempValue'),
  maxTokens: document.getElementById('maxTokens'),
  contextMessages: document.getElementById('contextMessages'),
  saveBtn: document.getElementById('saveBtn'),
  status: document.getElementById('status'),
  advancedToggle: document.getElementById('advancedToggle'),
  advancedContent: document.getElementById('advancedContent')
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSettings = {
  enabled: true,
  apiKey: '',
  model: 'gpt-4',
  customPrompt: '',
  temperature: 0.7,
  maxTokens: 500,
  contextMessages: 5
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup
document.addEventListener('DOMContentLoaded', async () => {
  console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  await loadSettings();
  setupEventListeners();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ storage
async function loadSettings() {
  try {
    const settings = await chrome.storage.sync.get(defaultSettings);
    
    elements.enabledToggle.checked = settings.enabled;
    elements.apiKey.value = settings.apiKey || '';
    elements.modelSelect.value = settings.model || 'gpt-4';
    elements.promptInput.value = settings.customPrompt || '';
    elements.temperature.value = settings.temperature || 0.7;
    elements.tempValue.textContent = settings.temperature || 0.7;
    elements.maxTokens.value = settings.maxTokens || 500;
    elements.contextMessages.value = settings.contextMessages || 5;
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  elements.saveBtn.addEventListener('click', saveSettings);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter –≤ –ø–æ–ª–µ API –∫–ª—é—á–∞
  elements.apiKey.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      saveSettings();
    }
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  elements.temperature.addEventListener('input', (e) => {
    elements.tempValue.textContent = e.target.value;
  });
  
  // Toggle —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  elements.advancedToggle.addEventListener('click', (e) => {
    e.preventDefault();
    elements.advancedContent.classList.toggle('show');
    const isShown = elements.advancedContent.classList.contains('show');
    elements.advancedToggle.textContent = isShown 
      ? '‚öôÔ∏è –°–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' 
      : '‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
  });
  
  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ toggle
  elements.enabledToggle.addEventListener('change', async () => {
    try {
      await chrome.storage.sync.set({ 
        enabled: elements.enabledToggle.checked 
      });
      
      const status = elements.enabledToggle.checked ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ';
      showStatus(`–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ${status}`, 'success');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ content script –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      notifyContentScript();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è toggle:', error);
    }
  });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings() {
  const apiKey = elements.apiKey.value.trim();
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
  if (!apiKey) {
    showStatus('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI', 'error');
    elements.apiKey.focus();
    return;
  }
  
  if (!apiKey.startsWith('sk-')) {
    showStatus('API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-"', 'error');
    elements.apiKey.focus();
    return;
  }
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  elements.saveBtn.disabled = true;
  elements.saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
  
  try {
    const settings = {
      enabled: elements.enabledToggle.checked,
      apiKey: apiKey,
      model: elements.modelSelect.value,
      customPrompt: elements.promptInput.value.trim(),
      temperature: parseFloat(elements.temperature.value),
      maxTokens: parseInt(elements.maxTokens.value),
      contextMessages: parseInt(elements.contextMessages.value)
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ chrome.storage
    await chrome.storage.sync.set(settings);
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
    showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º content script –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    notifyContentScript();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      window.close();
    }, 1500);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
  } finally {
    elements.saveBtn.disabled = false;
    elements.saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
  }
}

// –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
function showStatus(message, type = 'success') {
  elements.status.textContent = message;
  elements.status.className = `status ${type}`;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    elements.status.className = 'status';
  }, 5000);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ content script –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
async function notifyContentScript() {
  try {
    const [tab] = await chrome.tabs.query({ 
      active: true, 
      currentWindow: true 
    });
    
    if (tab && tab.url && tab.url.includes('wazzup24.com')) {
      await chrome.tabs.sendMessage(tab.id, { 
        type: 'SETTINGS_UPDATED' 
      });
      console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ content script');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Content script –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)');
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
elements.maxTokens.addEventListener('change', (e) => {
  const value = parseInt(e.target.value);
  if (value < 100) e.target.value = 100;
  if (value > 2000) e.target.value = 2000;
});

elements.contextMessages.addEventListener('change', (e) => {
  const value = parseInt(e.target.value);
  if (value < 1) e.target.value = 1;
  if (value > 10) e.target.value = 10;
});

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const togglePasswordBtn = document.createElement('button');
togglePasswordBtn.textContent = 'üëÅÔ∏è';
togglePasswordBtn.style.cssText = `
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  border: none;
  background: none;
  cursor: pointer;
  font-size: 16px;
  opacity: 0.6;
`;
togglePasswordBtn.addEventListener('click', () => {
  const type = elements.apiKey.type === 'password' ? 'text' : 'password';
  elements.apiKey.type = type;
  togglePasswordBtn.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ –ø–∞—Ä–æ–ª—è
const apiKeyGroup = elements.apiKey.parentElement;
apiKeyGroup.style.position = 'relative';
apiKeyGroup.appendChild(togglePasswordBtn);
